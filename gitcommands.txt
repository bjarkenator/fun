
.gitignore can contain single files or *.log, to ignore files.
.gitinfoexclude *trorjeg* kun til mig selv, .gitignore kommer med ud.

git add . -- add all to git :D
git commit -a --commit all changes
git commit -m "hej new release" -- commit change with remark
git add /f/F/file specific file
git commit -v containts diff of the stuff in the commit message

git log --stat  nice overview + show depth and extend stuff has changed in ghraph
git log -p      actual diff what actually was changed.

gitk --all &  graphical front end to see branches.

git branch 
git branch --color  //show local remote in color
git barch -a // shows all branches also remote one
git branch --track  fish origin /fish   // auto setup see .gitconfig

git branch human // new branch human 
git branch
# do git checkout human to get into the human branch
# checkl with git branch.

git checkout human  # switch to human 
git checkout master # switch to master
git commit -a -v  // -a all changes and diff shows
git rebase master # when in human branc, we rebase master onto human

# if we want the human back in master
# move to master: git checkout master
# git diff master human    -- show diff between the branches 
# git merge human          -- merges human into master

# go back before the merge , dont use
git reset --hard ORIG_HEAD

git chekcout -b vegetable   --> creates the branch + moves into it!
 
git stash "started on something but had to go to master and to a quick fix"  -- stashes for l8r
git status will show this
git checkout master
git add something
git commit -a -v -m " hehehehe"
git checkout vegetable
git stash list  -> should show what we stashed before :P
git stash apply -> now we are back where we were in the start

# delete a branch
git branch -d human 
git branch -D human   // big D to force it and clean up repoitory

# delete stash shit
git stash clear

# show the difference between index and respository
git diff --cached

# show the difference between working area and index
git diff



# repositories
scp used for ssh copying files











git config --global user.name "Your Name Here"
git config --global user.email "your_email@youremail.com"
git init
git add Readme.txt
git commit -m “Add Readme.txt”
git remote add origin https://github.com/username/myproject.git
git remote -v
git push

# for ruby etc for programs which are not whitespace aware at all.
git config --global apply.whitespace nowarn

gb git branch
gba git branch -a
gc git commit -v
gd git diff | mate
gl git pull
gp git push
gst git status





git we try it out !
'